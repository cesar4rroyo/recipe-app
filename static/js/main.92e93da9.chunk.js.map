{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","url","healthLabels","dietLabels","cautions","digest","key","id","className","style","width","src","alt","type","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","map","ingredient","text","label","e","total","unit","href","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","preventDefault","value","onChange","target","placeholder","length","role","recipe","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNA0IeA,G,KAvIA,SAAC,GAWT,IAVHC,EAUE,EAVFA,MACAC,EASE,EATFA,SACAC,EAQE,EARFA,MACAC,EAOE,EAPFA,YACAC,EAME,EANFA,IACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,WACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,OAEE,EADFC,IAEA,OACI,yBACIC,GAAG,OACHC,UAAU,2BACVC,MAAO,CAAEC,MAAO,UAEhB,yBAAKF,UAAU,eAAeG,IAAKZ,EAAOa,IAAI,KAC9C,yBAAKJ,UAAU,aACX,wBAAIA,UAAU,cAAd,IAA6BX,EAA7B,KACA,yBAAKW,UAAU,YAAYD,GAAG,oBAC1B,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cAAcD,GAAG,cAC5B,wBAAIC,UAAU,QACV,4BACIA,UAAU,eACVK,KAAK,SACLC,cAAY,WACZC,cAAY,eACZC,gBAAc,QACdC,gBAAc,eANlB,iBAYR,yBACIV,GAAG,cACHC,UAAU,gBACVU,kBAAgB,aAChBC,cAAY,qBAEZ,yBAAKX,UAAU,aACVR,EAAYoB,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,YAKhC,yBAAKd,UAAU,QACX,yBAAKA,UAAU,cAAcD,GAAG,cAC5B,wBAAIC,UAAU,QACV,4BACIA,UAAU,yBACVK,KAAK,SACLC,cAAY,WACZC,cAAY,eACZC,gBAAc,QACdC,gBAAc,eANlB,oBAYR,yBACIV,GAAG,cACHC,UAAU,WACVU,kBAAgB,aAChBC,cAAY,qBAEZ,yBAAKX,UAAU,aACX,wCAAcV,GACd,mCAEKK,EAAWiB,KAAI,SAAAG,GAAK,OACjB,4BAAKA,OAGb,qCAEKrB,EAAakB,KAAI,SAAAG,GAAK,OACnB,4BAAKA,OAGb,uCAEKnB,EAASgB,KAAI,SAAAG,GAAK,OACf,4BAAKA,UAMzB,yBAAKf,UAAU,QACX,yBAAKA,UAAU,cAAcD,GAAG,gBAC5B,wBAAIC,UAAU,QACV,4BACIA,UAAU,yBACVK,KAAK,SACLC,cAAY,WACZC,cAAY,iBACZC,gBAAc,QACdC,gBAAc,iBANlB,YAYR,yBACIV,GAAG,gBACHC,UAAU,WACVU,kBAAgB,eAChBC,cAAY,qBAEZ,yBAAKX,UAAU,aACVH,EAAOe,KAAI,SAAAI,GAAC,OACT,4BACKA,EAAED,MADP,MACiBC,EAAEC,MADnB,IAC2BD,EAAEE,aAOjD,yBAAKlB,UAAU,eACX,uBAAGmB,KAAM1B,EAAKO,UAAU,mBAAxB,aCtDLoB,EAvEH,WACR,IADc,EAGgBC,mBAAS,IAHzB,mBAGPC,EAHO,KAGEC,EAHF,OAIcF,mBAAS,IAJvB,mBAIPG,EAJO,KAICC,EAJD,OAKYJ,mBAAS,WALrB,mBAKPK,EALO,KAKAC,EALA,KAOdC,qBAAU,WACNC,MACD,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,mCAAD,OACWL,EADX,mBAXjB,WAWiB,oBAVhB,qCASG,cACTM,EADS,gBAIIA,EAASC,OAJb,OAITC,EAJS,OAKfC,QAAQC,IAAIF,EAAKG,MACjBd,EAAWW,EAAKG,MAND,2CAAH,qDAwBhB,OACI,yBAAKrC,UAAU,OACX,0BAAMsC,SAdI,SAAAtB,GACdA,EAAEuB,iBACFZ,EAASH,GACTC,EAAU,KAWqBzB,UAAU,eACjC,2BACIA,UAAU,aACVK,KAAK,OACLmC,MAAOhB,EACPiB,SAtBK,SAAAzB,GACjBS,EAAUT,EAAE0B,OAAOF,QAsBPG,YAAY,mBAEhB,4BAAQ3C,UAAU,kBAAkBK,KAAK,UAAzC,WAIJ,6BAAyB,IAAnBiB,EAAQsB,OAnBd,yBAAK5C,UAAU,0BAA0B6C,KAAK,SAA9C,+DAmBuC,MACvC,yBAAK7C,UAAU,iCACVsB,EAAQV,KAAI,SAAAkC,GAAM,OACf,kBAAC,EAAD,CAEIhD,IAAKgD,EAAOA,OAAO/B,MACnB1B,MAAOyD,EAAOA,OAAO/B,MACrBzB,SAAUwD,EAAOA,OAAOxD,SACxBC,MAAOuD,EAAOA,OAAOvD,MACrBC,YAAasD,EAAOA,OAAOtD,YAC3BC,IAAKqD,EAAOA,OAAOrD,IACnBE,WAAYmD,EAAOA,OAAOnD,WAC1BD,aAAcoD,EAAOA,OAAOpD,aAC5BE,SAAUkD,EAAOA,OAAOlD,SACxBC,OAAQiD,EAAOA,OAAOjD,eCvD1BkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.92e93da9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Recipe = ({\r\n    title,\r\n    calories,\r\n    image,\r\n    ingredients,\r\n    url,\r\n    healthLabels,\r\n    dietLabels,\r\n    cautions,\r\n    digest,\r\n    key\r\n}) => {\r\n    return (\r\n        <div\r\n            id=\"card\"\r\n            className=\"card mt-3 mb-3 mr-3 ml-3\"\r\n            style={{ width: \"20rem\" }}\r\n        >\r\n            <img className=\"card-img-top\" src={image} alt=\"\" />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\"> {title} </h5>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\" id=\"headingOne\">\r\n                            <h5 className=\"mb-0\">\r\n                                <button\r\n                                    className=\"btn btn-link\"\r\n                                    type=\"button\"\r\n                                    data-toggle=\"collapse\"\r\n                                    data-target=\"#collapseOne\"\r\n                                    aria-expanded=\"false\"\r\n                                    aria-controls=\"collapseOne\"\r\n                                >\r\n                                    Ingredients\r\n                                </button>\r\n                            </h5>\r\n                        </div>\r\n                        <div\r\n                            id=\"collapseOne\"\r\n                            className=\"collapse show\"\r\n                            aria-labelledby=\"headingOne\"\r\n                            data-parent=\"#accordionExample\"\r\n                        >\r\n                            <div className=\"card-body\">\r\n                                {ingredients.map(ingredient => (\r\n                                    <li>{ingredient.text}</li>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\" id=\"headingTwo\">\r\n                            <h5 className=\"mb-0\">\r\n                                <button\r\n                                    className=\"btn btn-link collapsed\"\r\n                                    type=\"button\"\r\n                                    data-toggle=\"collapse\"\r\n                                    data-target=\"#collapseTwo\"\r\n                                    aria-expanded=\"false\"\r\n                                    aria-controls=\"collapseTwo\"\r\n                                >\r\n                                    Important Info\r\n                                </button>\r\n                            </h5>\r\n                        </div>\r\n                        <div\r\n                            id=\"collapseTwo\"\r\n                            className=\"collapse\"\r\n                            aria-labelledby=\"headingTwo\"\r\n                            data-parent=\"#accordionExample\"\r\n                        >\r\n                            <div className=\"card-body\">\r\n                                <p>Calories: {calories}</p>\r\n                                <p>\r\n                                    Diet:\r\n                                    {dietLabels.map(label => (\r\n                                        <li>{label}</li>\r\n                                    ))}\r\n                                </p>\r\n                                <p>\r\n                                    Health:\r\n                                    {healthLabels.map(label => (\r\n                                        <li>{label}</li>\r\n                                    ))}\r\n                                </p>\r\n                                <p>\r\n                                    Cautions:\r\n                                    {cautions.map(label => (\r\n                                        <li>{label}</li>\r\n                                    ))}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\" id=\"headingThree\">\r\n                            <h5 className=\"mb-0\">\r\n                                <button\r\n                                    className=\"btn btn-link collapsed\"\r\n                                    type=\"button\"\r\n                                    data-toggle=\"collapse\"\r\n                                    data-target=\"#collapseThree\"\r\n                                    aria-expanded=\"false\"\r\n                                    aria-controls=\"collapseThree\"\r\n                                >\r\n                                    Digest\r\n                                </button>\r\n                            </h5>\r\n                        </div>\r\n                        <div\r\n                            id=\"collapseThree\"\r\n                            className=\"collapse\"\r\n                            aria-labelledby=\"headingThree\"\r\n                            data-parent=\"#accordionExample\"\r\n                        >\r\n                            <div className=\"card-body\">\r\n                                {digest.map(e => (\r\n                                    <li>\r\n                                        {e.label} : {e.total} {e.unit}\r\n                                    </li>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <a href={url} className=\"btn btn-primary\">\r\n                        More\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./Recipe\";\n\nconst App = () => {\n    const APP_ID = \"baf4ad18\";\n    const APP_KEY = \"0b7d95adc5c789e52f7369b7548a3d39\";\n    const [recipes, setRecipes] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"chicken\");\n\n    useEffect(() => {\n        getRecipes();\n    }, [query]);\n\n    const getRecipes = async () => {\n        const response = await fetch(\n            `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n        );\n        const data = await response.json();\n        console.log(data.hits);\n        setRecipes(data.hits);\n    };\n\n    const updateSearch = e => {\n        setSearch(e.target.value);\n    };\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        setSearch(\"\");\n    };\n    function error() {\n        return (\n            <div className=\"alert alert-danger mx-5\" role=\"alert\">\n                We don't have information about this ingredient, type again\n            </div>\n        );\n    }\n    return (\n        <div className=\"App\">\n            <form onSubmit={getSearch} className=\"search-form\">\n                <input\n                    className=\"search-bar\"\n                    type=\"text\"\n                    value={search}\n                    onChange={updateSearch}\n                    placeholder=\"Type to search\"\n                />\n                <button className=\"btn btn-primary\" type=\"submit\">\n                    Search\n                </button>\n            </form>\n            <div>{recipes.length === 0 ? error() : null}</div>\n            <div className=\"row justify-content-md-center\">\n                {recipes.map(recipe => (\n                    <Recipe\n                        // className=\"card-group\"\n                        key={recipe.recipe.label}\n                        title={recipe.recipe.label}\n                        calories={recipe.recipe.calories}\n                        image={recipe.recipe.image}\n                        ingredients={recipe.recipe.ingredients}\n                        url={recipe.recipe.url}\n                        dietLabels={recipe.recipe.dietLabels}\n                        healthLabels={recipe.recipe.healthLabels}\n                        cautions={recipe.recipe.cautions}\n                        digest={recipe.recipe.digest}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}